version: '3.8'

services:
  # Backend API server
  knot-space-api:
    build:
      context: .
      dockerfile: ./apps/knot-space/Dockerfile
    container_name: knot-space-api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@db:5432/knot_space
      - JWT_SECRET=your-secret-key-change-in-production
    depends_on:
      - db
    networks:
      - knot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend UI server  
  knot-space-ui:
    build:
      context: .
      dockerfile: ./apps/knot-space-ui/Dockerfile
    container_name: knot-space-ui
    ports:
      - "3000:3000"
    environment:
      - PUBLIC_BACKEND_URL=http://localhost:3001
    depends_on:
      - knot-space-api
    networks:
      - knot-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: knot-db
    environment:
      - POSTGRES_DB=knot_space
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/knot-space/migrations:/docker-entrypoint-initdb.d
    networks:
      - knot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: knot-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - knot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  knot-network:
    driver: bridge