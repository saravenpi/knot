# Example demonstrating comprehensive YAML variable interpolation
name: variable-demo
description: "Demonstration of Knot's variable interpolation system"

# Variable definitions
variables:
  # Simple variables
  project_name: "my-awesome-project"
  project_version: "1.2.0"
  author_name: "saravenpi"
  
  # Complex variables with interpolation
  full_project_name: "${project_name}-v${project_version}"
  project_description: "The ${project_name} project by ${author_name}"
  
  # Environment-specific variables
  api_base_url: "https://api.${project_name}.com"
  build_output_dir: "dist/${project_name}"
  
  # Variables with complex interpolation
  docker_image_name: "${author_name}/${project_name}:${project_version}"
  release_tag: "release-${project_version}-${project_name}"
  
  # Variables that can be overridden by environment variables
  # These will fallback to environment variables KNOT_NODE_ENV, KNOT_DEBUG_MODE, etc.
  node_env: "production"
  debug_mode: "false"

scripts:
  # Scripts using variable interpolation
  build: "echo 'Building ${full_project_name}' && npm run build --output-dir=${build_output_dir}"
  test: "echo 'Testing ${project_name}' && npm test"
  docker-build: "docker build -t ${docker_image_name} ."
  docker-push: "docker push ${docker_image_name}"
  release: "echo 'Releasing ${release_tag}' && git tag ${release_tag}"
  info: "echo 'Project: ${project_description}' && echo 'API: ${api_base_url}'"

apps:
  frontend:
    tsAlias: "@"
    packages:
      - ui-components
      - utils
    scripts:
      dev: "echo 'Starting ${project_name} frontend in ${node_env} mode' && vite dev"
      build: "vite build --outDir=${build_output_dir}/frontend"
  
  backend:
    tsAlias: "#"
    packages:
      - api-client
      - utils
    scripts:
      dev: "echo 'Starting ${project_name} backend (debug=${debug_mode})' && node server.js"
      build: "tsc --outDir ${build_output_dir}/backend"

# Example demonstrating error cases (these would generate validation errors):
# variables:
#   # This would cause a circular dependency error
#   circular_a: "${circular_b}"
#   circular_b: "${circular_a}"
#   
#   # This would cause an invalid variable name error
#   123invalid: "test"
#   
#   # This would cause a malformed syntax error
#   bad_syntax: "${unclosed_variable"
#   
#   # This would cause an undefined variable error
#   uses_undefined: "Value: ${undefined_variable}"