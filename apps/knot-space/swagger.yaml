openapi: 3.0.0
info:
  title: Knot Space API
  version: 0.1.0
  description: Online repository server for Knot packages
  contact:
    name: Knot Team
    url: https://github.com/saravenpi/knot

servers:
  - url: http://localhost:8000
    description: Local development server
  - url: https://api.knot.space
    description: Production server

tags:
  - name: auth
    description: User authentication endpoints
  - name: teams
    description: Team management endpoints
  - name: packages
    description: Package management endpoints

paths:
  /api/auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input
        '409':
          description: User already exists

  /api/auth/login:
    post:
      tags:
        - auth
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials

  /api/auth/profile:
    get:
      tags:
        - auth
      summary: Get current user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized

  /api/users/{username}:
    get:
      tags:
        - auth
      summary: Get user by username
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found

  /api/teams:
    post:
      tags:
        - teams
      summary: Create a new team
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeamRequest'
      responses:
        '200':
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: Invalid input
        '409':
          description: Team already exists

    get:
      tags:
        - teams
      summary: List all teams
      responses:
        '200':
          description: List of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'

  /api/teams/{teamName}:
    get:
      tags:
        - teams
      summary: Get team by name
      parameters:
        - name: teamName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Team details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          description: Team not found

    delete:
      tags:
        - teams
      summary: Delete team (owner only)
      security:
        - BearerAuth: []
      parameters:
        - name: teamName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Team deleted successfully
        '403':
          description: Forbidden
        '404':
          description: Team not found

  /api/teams/{teamName}/members:
    get:
      tags:
        - teams
      summary: Get team members
      parameters:
        - name: teamName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Team members
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    role:
                      type: string
                    joined_at:
                      type: string
                      format: date-time
                    user:
                      $ref: '#/components/schemas/UserProfile'

    post:
      tags:
        - teams
      summary: Add member to team
      security:
        - BearerAuth: []
      parameters:
        - name: teamName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTeamMemberRequest'
      responses:
        '201':
          description: Member added successfully
        '403':
          description: Forbidden
        '404':
          description: Team or user not found
        '409':
          description: User already in team

  /api/teams/{teamName}/members/{username}:
    delete:
      tags:
        - teams
      summary: Remove member from team
      security:
        - BearerAuth: []
      parameters:
        - name: teamName
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Member removed successfully
        '403':
          description: Forbidden
        '404':
          description: Team or user not found

  /api/packages/publish:
    post:
      tags:
        - packages
      summary: Publish a package
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                metadata:
                  type: string
                  description: JSON string of package metadata
                file:
                  type: string
                  format: binary
                  description: Package tar.gz file
      responses:
        '200':
          description: Package published successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageResponse'
        '400':
          description: Invalid input
        '409':
          description: Package version already exists
        '413':
          description: File too large

  /api/packages:
    get:
      tags:
        - packages
      summary: List all packages
      responses:
        '200':
          description: List of packages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PackageResponse'

  /api/packages/{name}:
    get:
      tags:
        - packages
      summary: Get all versions of a package
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Package versions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PackageResponse'

  /api/packages/{name}/{version}:
    get:
      tags:
        - packages
      summary: Get specific package version
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Package details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageResponse'
        '404':
          description: Package not found

    delete:
      tags:
        - packages
      summary: Delete a package version
      security:
        - BearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Package deleted successfully
        '403':
          description: Forbidden
        '404':
          description: Package not found

  /api/packages/download/{packageId}:
    get:
      tags:
        - packages
      summary: Download package file
      parameters:
        - name: packageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Package file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Package not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time

    CreateUserRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/UserProfile'

    Team:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        owner_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateTeamRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
        description:
          type: string
          nullable: true

    TeamMember:
      type: object
      properties:
        id:
          type: string
          format: uuid
        team_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        role:
          type: string
          enum: [owner, admin, member]
        joined_at:
          type: string
          format: date-time

    AddTeamMemberRequest:
      type: object
      required:
        - username
        - role
      properties:
        username:
          type: string
        role:
          type: string
          enum: [admin, member]

    Package:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
        description:
          type: string
          nullable: true
        owner_id:
          type: string
          format: uuid
        team_id:
          type: string
          format: uuid
          nullable: true
        download_url:
          type: string
        file_size:
          type: integer
          format: int64
        checksum:
          type: string
        published_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PublishPackageRequest:
      type: object
      required:
        - name
        - version
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        version:
          type: string
          minLength: 1
          maxLength: 20
        description:
          type: string
          nullable: true
        team_name:
          type: string
          nullable: true

    PackageResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
        description:
          type: string
          nullable: true
        owner:
          $ref: '#/components/schemas/UserProfile'
        team:
          $ref: '#/components/schemas/Team'
          nullable: true
        download_url:
          type: string
        file_size:
          type: integer
          format: int64
        published_at:
          type: string
          format: date-time