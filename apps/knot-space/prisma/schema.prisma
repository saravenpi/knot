generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username     String   @unique @db.VarChar(50)
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  ownedTeams    Team[]        @relation("TeamOwner")
  teamMembers   TeamMember[]
  ownedPackages Package[]     @relation("PackageOwner")
  sessions      Session[]
  accounts      Account[]

  @@index([username])
  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model Team {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(50)
  description String?  @db.Text
  ownerId     String   @map("owner_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  owner    User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members  TeamMember[]
  packages Package[]

  @@index([name])
  @@index([ownerId])
  @@index([createdAt])
  @@map("teams")
}

model TeamMember {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teamId   String   @map("team_id") @db.Uuid
  userId   String   @map("user_id") @db.Uuid
  role     String   @default("member") @db.VarChar(20)
  joinedAt DateTime @default(now()) @map("joined_at")

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model Package {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String   @db.VarChar(100)
  version        String   @db.VarChar(20)
  description    String?  @db.Text
  ownerId        String   @map("owner_id") @db.Uuid
  teamId         String?  @map("team_id") @db.Uuid
  downloadUrl    String   @map("download_url") @db.VarChar(500)
  filePath       String   @map("file_path") @db.VarChar(500)
  fileSize       BigInt   @map("file_size")
  checksumSha256 String   @map("checksum_sha256") @db.VarChar(64)
  downloadsCount BigInt   @default(0) @map("downloads_count")
  publishedAt    DateTime @default(now()) @map("published_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  owner User        @relation("PackageOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  team  Team?       @relation(fields: [teamId], references: [id], onDelete: SetNull)
  tags  PackageTag[]

  @@unique([name, version])
  @@index([name])
  @@index([ownerId])
  @@index([teamId])
  @@index([publishedAt])
  @@index([downloadsCount])
  @@map("packages")
}

model PackageTag {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  packageId String   @map("package_id") @db.Uuid
  tag       String   @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@unique([packageId, tag])
  @@index([tag])
  @@index([packageId])
  @@map("package_tags")
}

// Better Auth models
model Session {
  id        String   @id
  userId    String   @map("user_id") @db.Uuid
  expiresAt DateTime @map("expires_at")
  token     String   @unique
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("session")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") @db.Uuid
  accountId         String  @map("account_id")
  providerId        String  @map("provider_id")
  accessToken       String? @map("access_token") @db.Text
  refreshToken      String? @map("refresh_token") @db.Text
  idToken           String? @map("id_token") @db.Text
  accessTokenExpiresAt DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope             String?
  password          String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, value])
  @@map("verification")
}
